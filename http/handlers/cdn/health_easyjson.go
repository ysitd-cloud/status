// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package cdn

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn(in *jlexer.Lexer, out *resultData) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "since":
			out.Since = string(in.String())
		case "until":
			out.Until = string(in.String())
		case "requests":
			(out.Requests).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn(out *jwriter.Writer, in resultData) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"since\":")
	out.String(string(in.Since))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"until\":")
	out.String(string(in.Until))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"requests\":")
	(in.Requests).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v resultData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v resultData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *resultData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *resultData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn(l, v)
}
func easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn1(in *jlexer.Lexer, out *result) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totals":
			(out.Totals).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn1(out *jwriter.Writer, in result) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"totals\":")
	(in.Totals).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn1(l, v)
}
func easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn2(in *jlexer.Lexer, out *requestsSSL) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "encrypted":
			out.Encrypted = int(in.Int())
		case "unencrypted":
			out.Unencrypted = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn2(out *jwriter.Writer, in requestsSSL) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"encrypted\":")
	out.Int(int(in.Encrypted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"unencrypted\":")
	out.Int(int(in.Unencrypted))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v requestsSSL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v requestsSSL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *requestsSSL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *requestsSSL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn2(l, v)
}
func easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn3(in *jlexer.Lexer, out *requests) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "all":
			out.All = int(in.Int())
		case "cached":
			out.Cached = int(in.Int())
		case "uncached":
			out.Uncached = int(in.Int())
		case "content_type":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ContentType = make(map[string]int)
				} else {
					out.ContentType = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 int
					v1 = int(in.Int())
					(out.ContentType)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "country":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Country = make(map[string]int)
				} else {
					out.Country = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 int
					v2 = int(in.Int())
					(out.Country)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ssl":
			(out.SSL).UnmarshalEasyJSON(in)
		case "http_status":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HttpStatus = make(map[string]int)
				} else {
					out.HttpStatus = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 int
					v3 = int(in.Int())
					(out.HttpStatus)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn3(out *jwriter.Writer, in requests) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"all\":")
	out.Int(int(in.All))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cached\":")
	out.Int(int(in.Cached))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uncached\":")
	out.Int(int(in.Uncached))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"content_type\":")
	if in.ContentType == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in.ContentType {
			if !v4First {
				out.RawByte(',')
			}
			v4First = false
			out.String(string(v4Name))
			out.RawByte(':')
			out.Int(int(v4Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	if in.Country == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.Country {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			out.Int(int(v5Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ssl\":")
	(in.SSL).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"http_status\":")
	if in.HttpStatus == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in.HttpStatus {
			if !v6First {
				out.RawByte(',')
			}
			v6First = false
			out.String(string(v6Name))
			out.RawByte(':')
			out.Int(int(v6Value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v requests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v requests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *requests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *requests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn3(l, v)
}
func easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn4(in *jlexer.Lexer, out *cfResponse) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn4(out *jwriter.Writer, in cfResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"result\":")
	(in.Result).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v cfResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cfResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53c2c5caEncodeGithubComYsitdCloudStatusHttpHandlersCdn4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cfResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cfResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53c2c5caDecodeGithubComYsitdCloudStatusHttpHandlersCdn4(l, v)
}
